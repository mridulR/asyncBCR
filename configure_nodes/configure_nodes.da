from src.utils import config_parser
from src.utils import Logger 
import sys
import subprocess
import time
import os
import logging

replica = import_da("src.replicas.replica")
olympus = import_da("src.olympus.olympus")
client = import_da("src.client.client")

"""
This is the starting script for Byzantine chain replication.

It is provided with a config file which is eventually shared
by all processes eg olympus, replicas and clients.

Responsibility:
    1. Receive config file path from command-line input.
    2. In case no config file is specified, keep the default config
       file which is /config/config.csv in our case.
    3. Initialize olympus and pass config file.
    4. Initialize clients and pass config file.
"""
def main():

    # Read configuration
    config_file = 'config/config.csv'
    
    Logger.setLogFormatting("config_node.log", Logger.getLogDir(), logging.WARN)                                                                        
    Logger.setLogNodeInfo("<config_node#1234>", "CONFIG_NODE");
    logging.warn("Hello this is my new msg ", extra=Logger.NODE_INFO)

    if len(sys.argv) > 1:
        config_file = sys.argv[1]
    else:
        print("No configuration file is passed. Picking default : /config/config.csv")

    config = config_parser.get_config(config_file) 
    hosts = [each_host.strip() for each_host in config[config_parser.HOSTS].split(';')]

    # Initialize olympus at respective host.
    olympus_host = hosts[int(config[olympus.HOST])]
    node_name = "OlympusNode"
    if olympus_host != 'localhost':
        node_name += "@" + olympus_host
    oly = new(olympus.olympus, num=1, at=node_name)
    
    client_hosts = [int(cl_host) for cl_host in config[client.CLIENT_HOSTS].split(';')]
    # Initialize clients at respective hosts.
    # Number of clients and their hosts is read from config file
    client_list = []
    for client_no in range(0, int(config[client.NUM_OF_CLIENTS])):
        node_name = "ClientNode" + str(client_no)
        host_name = hosts[client_hosts[client_no]]  #TODO: Right now only supporting localhost.
        if host_name != 'localhost':
            node_name += "@" + host_name
        client_list.append(new(client.client, num=1, at=node_name))

    replica_hosts = [int(rep_host) for rep_host in config[replica.REPLICA_HOSTS].split(';')]
    # Initialize replicas at respective hosts.
    # Number of replicas and their hosts is read from config file
    replica_list = []
    num_of_replicas = (2 * int(config[replica.FAILURES_TO_TOLERATE])) + 1
    for replica_no in range(0, num_of_replicas):
        node_name = "ReplicaNode" + str(replica_no)
        host_name = hosts[replica_hosts[replica_no]]  #TODO: Right now only supporting localhost.
        if host_name != 'localhost':
            node_name += "@" + host_name
        replica_list.append(new(replica.replica, num=1, at=node_name))
 
    # After clients have been initialized, call setup on respective client nodes
    # This includes sending the configuration file and repective client no
    for replica_no in range(0, num_of_replicas):
        setup(replica_list[replica_no], [config_file, replica_no, replica_list, oly])
    
    #TODO: Don't pass replica list from here
    # After clients have been initialized, call setup on respective client nodes
    # This includes sending the configuration file and repective client no
    for client_no in range(0, int(config[client.NUM_OF_CLIENTS])):
        setup(client_list[client_no], [config_file, client_no, oly, replica_list])

    setup(oly, [config_file, client_list, replica_list])
    
    # Start olympus
    start(oly)
    time.sleep(2)
   
    #TODO: Replicas should be started by olympus. Figure out a way to call new from run. 
    # Start replicas
    for rep in replica_list:
        start(rep)
        time.sleep(2)

    # Start clients
    for cli in client_list:
        start(cli)
        time.sleep(2)
    
    print("Env set up has been done.Procced")
