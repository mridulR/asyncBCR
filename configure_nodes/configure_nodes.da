#!/usr/bin/python3
# -*- coding: utf-8 -*-

import sys
import subprocess
import time
import os
import logging
import nacl.encoding
import nacl.signing

from src.utils import config_parser
from src.utils import logger

replica = import_da('src.replicas.replica')
olympus = import_da('src.olympus.olympus')
client = import_da('src.client.client')

def verify_key(sign_key):
    return sign_key.verify_key

def main():

    # Read configuration

    config_file = 'config/single_client_with_no_failure_with_workload.csv'
    
    # Cleanup the previous run log file for Config

    logger.cleanLogFile('Config.log', logger.getLogDir())

    # Setting the logging format for the CONFIG_NODE
    # Default logging is INFO for CONFIG_NODE.

    logger.setLogFormatting('Config.log', logger.getLogDir(),
                            logging.INFO)
    logger.setLogNodeInfo('<config_node#1234>', 'CONFIG_NODE')

    if len(sys.argv) > 1:
        config_file = sys.argv[1]
    else:
        logging.info("No configuration file is passed. Picking default" +
                     ":/config/single_client_with_no_failure_with_workload.csv", extra=logger.NODE_INFO)
    
    config(channel="reliable")
    config_values = config_parser.get_config(config_file)
    hosts = [each_host.strip() for each_host in
             config_values[config_parser.HOSTS].split(';')]


    olympus_host = hosts[int(config_values[olympus.HOST])]
    oly_name = 'OlympusNode'

    # Cleanup the previous run log file for Olympus

    logger.cleanLogFile(oly_name+".log", logger.getLogDir())

    # Initialize olympus at respective host.

    if olympus_host != 'localhost':
        oly_name += '@' + olympus_host
    oly = new(olympus.olympus, num=1, at=oly_name)
    
    oly_signing_key = nacl.signing.SigningKey.generate()
    oly_verify_key = oly_signing_key.verify_key

    client_hosts = [int(cl_host) for cl_host in
                    config_values[client.CLIENT_HOSTS].split(';')]

    # Initialize clients at respective hosts.
    # Number of clients and their hosts is read from config file

    client_list = []
    client_name = []
    client_signing_keys = []
    for client_no in range(0, int(config_values[client.NUM_OF_CLIENTS])):
        node_name = 'ClientNode' + str(client_no)

        # Cleanup the previous run log file for clients

        logger.cleanLogFile(node_name+".log", logger.getLogDir())

        # TODO: Right now only supporting localhost.

        host_name = hosts[client_hosts[client_no]]
        if host_name != 'localhost':
            node_name += '@' + host_name
        client_list.append(new(client.client, num=1, at=node_name))
        client_signing_keys.append(nacl.signing.SigningKey.generate())
        client_name.append(node_name)
        logging.info("Created client- {Name: %s, Id: %s}",
                     client_name[-1], client_list[-1], extra=logger.NODE_INFO)

    replica_hosts = [int(rep_host) for rep_host in
                     config_values[replica.REPLICA_HOSTS].split(';')]

    # Initialize replicas at respective hosts.
    # Number of replicas and their hosts is read from config file

    replica_list = []
    replica_name = []
    replica_signing_keys = []
    num_of_replicas = 2 * int(config_values[replica.FAILURES_TO_TOLERATE]) + 1
    for replica_no in range(0, num_of_replicas):
        node_name = 'ReplicaNode' + str(replica_no)

        # Cleanup the previous run log file for replicas

        logger.cleanLogFile(node_name+".log", logger.getLogDir())

        # TODO: Right now only supporting localhost.

        host_name = hosts[replica_hosts[replica_no]]
        if host_name != 'localhost':
            node_name += '@' + host_name
        replica_list.append(new(replica.replica, num=1, at=node_name))
        replica_name.append(node_name)
        replica_signing_keys.append(nacl.signing.SigningKey.generate())
        logging.info("Created replica- {Name: %s, Id: %s}",
                     replica_name[-1], replica_list[-1],
                     extra=logger.NODE_INFO)
    
    replica_verify_keys = list(map( verify_key, replica_signing_keys))    

    # After clients have been initialized, call setup on respective client
    # nodes
    # This includes sending the configuration file and repective client no

    for replica_no in range(0, num_of_replicas):
        setup(replica_list[replica_no], [config_file, replica_no, replica_list,
                replica_name, oly, oly_verify_key, replica_verify_keys, replica_signing_keys[replica_no]])
        logging.info("Setting up replica- {Name: %s, Id: %s}",
                     replica_name[replica_no], replica_list[replica_no],
                     extra=logger.NODE_INFO)

    # After clients have been initialized, call setup on respective client
    # nodes
    # This includes sending the configuration file and repective client no

    for client_no in range(0, int(config_values[client.NUM_OF_CLIENTS])):
        setup(client_list[client_no], [config_file, client_no, oly, oly_name,
            client_name[client_no], client_list[client_no]])
        logging.info("Setting up client- {Name: %s, Id: %s}",
                     client_name[client_no], client_list[client_no],
                     extra=logger.NODE_INFO)

    setup(oly, [config_file, replica_list, replica_name, oly_name, oly, oly_signing_key, replica_verify_keys])
    logging.info("Setting up olympus- {Name: %s, Id: %s}", oly_name,
                 oly, extra=logger.NODE_INFO)

    # Start olympus

    start(oly)
    logging.info("Starting olympus- {Name: %s, Id: %s}", oly_name,
                 oly, extra=logger.NODE_INFO)
    time.sleep(2)

    # TODO: Replicas should be started by olympus. Figure out a way to call new
    # from run.
    # Start replicas

    for (rep, rep_name) in zip(replica_list, replica_name):
        start(rep)
        logging.info("Starting replica- {Name: %s, Id: %s}", rep_name,
                     rep, extra=logger.NODE_INFO)
        time.sleep(2)

    # Start clients

    for (cli, cli_name) in zip(client_list, client_name):
        start(cli)
        logging.info("Starting client- {Name: %s, Id: %s}", cli_name,
                     cli, extra=logger.NODE_INFO)
        time.sleep(2)

    logging.info("Environment set has been done. Proceeding...",
                 extra=logger.NODE_INFO)
