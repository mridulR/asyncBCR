#!/usr/bin/python3
# -*- coding: utf-8 -*-
import sys
import os
import logging
import time
from src.utils import Logger
from src.utils import config_parser
from random import randint

# Configuration keys for client

NUM_OF_CLIENTS = 'num_client'
CLIENT_TIMEOUT = 'client_timeout'
CLIENT_HOSTS = 'client_hosts'


class client(process):

    def setup(config_file, client_no, olympus, olympus_name,
              name, nodeId,):

        config = config_parser.get_config(config_file)
        self.time_out = config[CLIENT_TIMEOUT]

        self.current_replicas = []
        # Setting the logging format for the CONFIG_NODE
        # Default logging is INFO for CONFIG_NODE.
        # Other applicable values - logging.WARN, logging.CRITICAL,
        # logging.ERROR, logging.DEBUG
        # Use respective logging.warn, logging.critical, logging.error,
        # logging.debug

        Logger.setLogFormatting(self.name + '.log', Logger.getLogDir(),
                                logging.INFO)
        Logger.setLogNodeInfo(self.nodeId, self.name)

        # Log the received values

        logging.info("Client {clientId: %s, clientName: %s} received setup - "  +
                     "config_file: %s client_no: %s olympus - {olympusId: %s, " +
                     "olympusName: %s}", self.nodeId,
                     self.name, self.config_file, str(self.client_no),
                     self.olympus, self.olympus_name,
                     extra=Logger.NODE_INFO)
        return
        
    def receive(msg=('rcv_curr_config', replicas), from_=self.olympus):
        if int(len(replicas)) > 0:
            print("Setting current replicas set message to head : ")
            self.current_replicas = replicas
        else:
            print("No replica to send order request to !!!")

        return


    def receive(msg=('result_proof', result_proof, replica_no)):
        output("Received result_proof from replica ReplicaNode", str(replica_no))
        output(result_proof)

        # TODO: Based on above todo fix this as well

        logging.info("client { clientId: %s, clientName: %s} received " +
                     "result_proof from replica {replicaId: %s, replicaName:" +
                     "%s}", self.nodeId, self.name, str(replica_no),
                     str(replica_no), extra=Logger.NODE_INFO)
        return

    def run():

        logging.info("Running client- clientId: %s clientName: %s",
                     self.nodeId, self.name, extra=Logger.NODE_INFO)

        print("Asking current config from olympus")
        logging.info("Client {clientId: %s, clientName: %s} sending request " +
                     "for CURRENT_CONFIG to olympus {olympusId: %s," +
                     "olympusName: %s} ", self.nodeId, self.name, self.olympus,
                     self.olympus_name, extra=Logger.NODE_INFO)

        send(('req_curr_config', self), to=olympus)
        await(some(received(('rcv_curr_config', _))))
        if len(current_replicas) > 0:
            send(('request_order', self, randint(1, 9000), 'some_order'),
                    to=current_replicas[0])
        print("time_out", time_out)
        if await(len(setof(a, received(('result_proof', _, _), from_ =a))) > 0):
            print("Result within time bound")
        elif timeout(int(time_out) / 1000):
            print("Time out is working")
        while True:
            await(received(('', )))
        return
