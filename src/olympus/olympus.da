#!/usr/bin/python3
# -*- coding: utf-8 -*-

import sys
import os
import logging
from src.utils import logger
import nacl.encoding
import nacl.signing


# Configuration Params to be read from config file

HOST = 'olympus_host'


class olympus(process):
    """ An implementation to handle the singleton Olympus. """

    def setup(config_file, replica_list, replica_name, name, nodeId,
              signing_key, replica_verify_keys):
        """ Setting up the Olympus based on configuration."""

        # Setting the logging format for the CONFIG_NODE
        # Default logging is INFO for CONFIG_NODE.
        # Other applicable values - logging.WARN, logging.CRITICAL,
        # logging.ERROR, logging.DEBUG
        # Use respective logging.warn, logging.critical, logging.error,
        # logging.debug

        logger.setLogFormatting(self.name + '.log', logger.getLogDir(),
                                logging.INFO)
        logger.setLogNodeInfo(self.nodeId, self.name)

        # Log the received values

        logging.info("Received setup - config_file: %s " +
                     "replica_list: %s replica_name: %s", config_file,
                     replica_list, replica_name, extra=logger.NODE_INFO)
        return

    def receive(msg=('req_reconfiguration', client_no)):
        print("Reconfiguration  request received from ", client_no)
        for replica in replica_list:
            send(('wedge',), to=replica)

    def receive(msg=('req_curr_config', client)):
        """ Receives the CURRENT_CONFIG request from client. """

        logging.info("Received request CURRENT_CONFIG from %s",
                     str(client), extra=logger.NODE_INFO)
        if client is not None:
            logging.info("Sending CURRENT_CONFIG to : %s", str(client),
                         extra=logger.NODE_INFO)
            send(('rcv_curr_config', replica_list, replica_name,
                  replica_verify_keys), to=client)
        else:
            logger.setLogFormatting(self.name + '.log',
                                    logger.getLogDir(), logging.ERROR)
            logging.error('Request from illegal client',
                          extra=logger.INFO)

    def run():
        """ Waits infinitely for serving any request.  """

        logging.info("Running Olympus- {Name: %s, Id: %s}", self.name, nodeId,
                     extra=logger.NODE_INFO)
        print("Olympus running waiting to serve request !!! ")

        while True:
            await(received(('', )))
