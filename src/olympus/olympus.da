#!/usr/bin/python3
# -*- coding: utf-8 -*-

import sys
import os
import logging
import json
from src.utils import logger
import nacl.encoding
import nacl.signing
import time


# Configuration Params to be read from config file

HOST = 'olympus_host'
HASHER = nacl.hash.sha256
current_milli_time = lambda: int(round(time.time() * 1000))
OLYMPUS_TIME_OUT_SEC = 3

class olympus(process):
    """ An implementation to handle the singleton Olympus. """

    def setup(config_file, replica_list, replica_name, name, nodeId,
              signing_key, replica_verify_keys):
        """ Setting up the Olympus based on configuration."""

        # Setting the logging format for the CONFIG_NODE
        # Default logging is INFO for CONFIG_NODE.
        # Other applicable values - logging.WARN, logging.CRITICAL,
        # logging.ERROR, logging.DEBUG
        # Use respective logging.warn, logging.critical, logging.error,
        # logging.debug

        logger.setLogFormatting(self.name + '.log', logger.getLogDir(),
                                logging.INFO)
        logger.setLogNodeInfo(self.nodeId, self.name)

        # Log the received values

        logging.info("Received setup - config_file: %s " +
                     "replica_list: %s replica_name: %s", config_file,
                     replica_list, replica_name, extra=logger.NODE_INFO)

        self.quorum_size = ((len(replica_list) - 1) / 2) + 1

        self.is_reconfig_in_progress = False
        self.replica_wedge_info = {}
        self.config = 0
        self.consistent_caught_up = {}
        self.reconfig_running_state = None
        self.reconfig_hash_value = None
        self.new_config_applied = {}
        self.all_running_states = {}
        return

    def get_slot_order_union(slot_order_map_1, slot_order_map_2):
        if slot_order_map_1 == None or slot_order_map_2 == None:
            return None
        result = {}
        for key in slot_order_map_1.keys():
            if key in slot_order_map_2.keys():
                val_1 = slot_order_map_1[key]
                val_2 = slot_order_map_2[key]
                if val_1 == val_2:
                    result[key] = slot_order_map_1[key]
                else:
                    return None
            else:    
                result[key] = slot_order_map_1[key]

        for key in slot_order_map_2.keys():
            if key not in result.keys():
                result[key] = slot_order_map_2[key]
        return result

    def build_longest_history(chk_point_proof):
        if chk_point_proof == None:
            return None 
        if len(chk_point_proof) < 2:
            return chk_point_proof
        result = {}
        for ind in chk_point_proof.keys():
            result = get_slot_order_union(result, chk_point_proof[ind])
            if result == None:
                return None
        return result


    def is_history_consistent(replica_info):
        long_hist = build_longest_history(replica_info)
        if long_hist == None:
            return False
        return True

    def has_consistent_history_chk_pt(replica_info):
        if not is_history_consistent(replica_info):
            return False
        return True


    def build_consistent_history(replica_wedge_info):
        print("Wedge_resp: build_consistent_history")
        if has_consistent_history_chk_pt(replica_wedge_info):
            print("Wedge_resp: Has consistent Hsitory")
            long_hist = build_longest_history(replica_wedge_info)
            print("Wedge_resp: Longest Hist", long_hist)
            do_caught_up_consistent(replica_wedge_info, long_hist)
        else:
            replica_wedge_info = {}
            new_config_applied = {}
            print("Wedge_resp: Reset replica_wedge_info, new_config_applied")
            is_reconfig_in_progress = False
            print( " SEND WEDGE : is_reconfig_in_progress = False")
            for replica in replica_list:
                send(('wedge',), to=replica)
        return

    def receive(msg=('wedge_resp', replica_no, hist)):
        print("Wedge_Resp: Reconfiguration response received from ", replica_no)
        if is_reconfig_in_progress == False:
            print("Wedge_Resp: Ignored as no reconfig going on")
            return
        if len(replica_wedge_info) > quorum_size:        
            print("Wedge_Resp: Quorum already met for wedge_resp", replica_no)
            return
        replica_wedge_info[replica_no] = hist
        if len(replica_wedge_info) == quorum_size:
            print("Wedge_Resp: quorum replica - ", replica_wedge_info.keys())
            build_consistent_history(replica_wedge_info)
        return

    def receive(msg=('caught_up', replica_no, hash_value)):
        print("Caught_up: Reconfiguration response received from ", replica_no)
        if is_reconfig_in_progress == False:
            print("Caught_up: Ignored as no reconfig going on")
            return
        if len(consistent_caught_up) > quorum_size:
            print("Caught_up: Quorum already met for wedge_resp", replica_no)
            return
        consistent_caught_up[replica_no] = hash_value
        print("Caught_up: consistent_caught_up", consistent_caught_up[replica_no])
        if len(consistent_caught_up) == quorum_size:
            hash_value = ""
            for key in consistent_caught_up.keys():
                if len(hash_value) == 0:
                    hash_value = consistent_caught_up[key]
                elif hash_value == consistent_caught_up[key]:
                    reconfig_hash_value = hash_value
            get_running_state(consistent_caught_up)
        else:
            print("Will do something")
        return

    def get_running_state(consistent_caught_up):
        print("Invoke get_running_state: Ignored as no reconfig going on")
        for key in consistent_caught_up.keys():
            send(('get_running_state',), to=replica_list[key])
        return


    def receive(msg=('rcv_running_state', replica_no, running_state)):
        print("Running_state: { replica: %s running_state: %s }", str(replica_no), running_state)
        if is_reconfig_in_progress == False:
            print("Running_state: Configuration in progress ")
            return
        if len(consistent_caught_up) > quorum_size:
            print("Running_state: Reached Quorum")
            return
        all_running_states[replica_no] = running_state
        print("Running_state: ", all_running_states)
        if len(all_running_states) == quorum_size:
            print("Running_state: ", len(all_running_states), quorum_size)
            consistent_run_state = None
            for key in all_running_states:
                print("Running_state: Key: ", key)
                run_state = all_running_states[key]
                if verify_running_state(run_state):
                    print("Running_state: verify_running_state: True", run_state)
                    consistent_run_state = run_state
                    break
            print("Running_state: Before: config, replica_wedge_info, new_config_applied, T/F, con.")
            print(config, replica_wedge_info, new_config_applied, is_reconfig_in_progress, consistent_caught_up)
            config += 1
            replica_wedge_info = {}
            new_config_applied = {}
            consistent_caught_up = {}
            is_reconfig_in_progress = False
            print("Running_state: After: config, replica_wedge_info, new_config_applied, T/F, con.")
            print(config, replica_wedge_info, new_config_applied, is_reconfig_in_progress, consistent_caught_up)
            print("Running State: Sending new configuration ................, ", replica_list)
            for replica in replica_list:
                send(('new_configuration', config,  consistent_run_state,), to=replica)
        return

    def verify_running_state(running_state):
        msg = 16 * str.encode(json.dumps(running_state))
        digest = HASHER(msg, encoder=nacl.encoding.HexEncoder)
        if digest == reconfig_hash_value:
            reconfig_running_state = running_state
            return True
        else:
            return False

    def do_caught_up_consistent(replica_info, long_hist):
        consistent_caught_up = {}
        reconfig_running_state = None
        reconfig_hash_value = None
        for ind in replica_info.keys():
            replica = replica_list[ind]
            print("Asking catch up from - ", ind)
            send(('catch_up', long_hist), to=replica)
        print("Awaitaing for caught up response from ", replica_info.keys())
        return

    def is_caught_up_consistent(replica_info, long_hist):
        consistent_caught_up = {}
        reconfig_running_state = None
        reconfig_hash_value = None
        for ind in replica_info.keys():
            replica = replica_list[ind]
            print("Asking catch up from - ", ind)
            send(('catch_up', long_hist), to=replica)
        print("Awaitaing for caught up response from ", replica_info.keys())
        await(len(setof(a, received(('caught_up', _, _), from_=a))) >= quorum_size)
        print("Await ended")
        hash_value = ""
        for key in consistent_caught_up.keys():
            if key not in replica_wedge_info.keys():
                continue
            if len(hash_value) == 0:
                hash_value = consistent_caught_up[key]
            elif hash_value != consistent_caught_up[key]:
                return False
        reconfig_hash_value = hash_value
        return True


    def receive(msg=('new_config_done', client_no)):
        print("New config done for ", client_no)


    def receive(msg=('req_reconfiguration', replica_no)):
        print("REQ_RECONFIG: from replica", replica_no)
        if is_reconfig_in_progress == True:
            print("REQ_RECONFIG: Reconfiguration was in progress", replica_no)
            return
        is_reconfig_in_progress = True
        print("REQ_RECONFIG: is_reconfig_in_progress: True, Replica: ", replica_no)
        for replica in replica_list:
            send(('wedge',), to=replica)
        return

    def receive(msg=('ack_activate', replica_no)):
        if is_reconfig_in_progress == False:
            return
        print("Rcv activate acknowledgement from client - ", replica_no)

    def receive(msg=('req_curr_config', client)):
        """ Receives the CURRENT_CONFIG request from client. """

        if client is not None:
            logging.info("Sending CURRENT_CONFIG to : %s", str(client),
                         extra=logger.NODE_INFO)
            if is_reconfig_in_progress == False:
                logging.info("Sending Non Emprty CURRENT_CONFIG to : %s", str(client),
                         extra=logger.NODE_INFO)
                send(('rcv_curr_config', replica_list, replica_name,
                    replica_verify_keys), to=client)
            else:
                logging.info("Sending Empty CURRENT_CONFIG to : %s", str(client),
                         extra=logger.NODE_INFO)
                send(('rcv_curr_config', [], [], []), to=client)
        else:
            logger.setLogFormatting(self.name + '.log',
                                    logger.getLogDir(), logging.ERROR)
            logging.error('Request from illegal client',
                          extra=logger.INFO)

    def run():
        """ Waits infinitely for serving any request.  """

        logging.info("Running Olympus- {Name: %s, Id: %s}", self.name, nodeId,
                     extra=logger.NODE_INFO)
        print("Olympus running waiting to serve request !!! ")

        while True:
            await(received(('', )))
