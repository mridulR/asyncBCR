from src.utils import Logger 
import sys
import os
import logging
import time

REPLICA_HOSTS = "replica_hosts"
FAILURES_TO_TOLERATE = "t"

class replica(process):    

    def setup(config_file, replica_no, replicas, olympus):
        ## current_slot updated only by head replica
        self.current_slot = 0
        ## running state of replica
        self.running_state = {}
        ## history of replica
        self.history = {}

        ## Update next and previous replica by each replica
        self.num_of_replicas = len(replicas)
        if replica_no == 0:
            self.prev = None
            self.me = replicas[0]
            self.next_r = replicas[1]
        elif replica_no == len(replicas) - 1:
            self.prev = replicas[replica_no - 1]
            self.me = replicas[replica_no]
            self.next_r = None
        else:
            self.prev = replicas[replica_no - 1]
            self.me = replicas[replica_no]
            self.next_r = replicas[replica_no + 1]

    # Only head is supposed to handle order request from client    
    def receive(msg=('request_order', client, unique_order_ide, order_req,)):
        output("Received order request from " + str(client))
        if self.prev == None:
            print("Forwarding order request to next : ")
            send(('forward_shuttle', client, order_req,), to = self.next_r)
        else:
            print("I am not the head to take order request from client")

    # Forward Shuttle to next
    def receive(msg=('forward_shuttle', client, order_req,), from_ = self.prev):
        output("Received order request from prev for client" + str(client))
        if self.next_r != None:
            print("Forwarding order request to next : ")
            send(('forward_shuttle', client, order_req,), to = self.next_r)
        else:
            print("I am the tail and sending to client")
            send(('result_proof', 'Some Result which is proof', self.replica_no,), to = client)
            print("sending result proof shuttle back")
            send(('result_shuttle', 'Returning result proof',), to = self.prev)
    
    # Return Shuttle from next
    def receive(msg=('result_shuttle', result_proof,), from_ = self.next_r):
        output("Received  result from next")
        if self.prev != None:
            print("Forwarding result proof to prev : ")
            send(('result_shuttle', result_proof,), to = self.prev)
        else:
            print("I am the Head and have received result proof shuttle")
            print(result_proof)
    
    def run():
        print("Replica : ", str(self.me))
        while True:
            await(received(('',)))

