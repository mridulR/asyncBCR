from src.utils import Logger 
import sys
import os
import logging
import time

REPLICA_HOSTS = "replica_hosts"
FAILURES_TO_TOLERATE = "t"

class replica(process):    

    STATE = "PENDING"    

    def setup(config_file, replica_no, replicas, olympus):
        self.config_file = config_file    
        self.replica_no = replica_no
        self.replicas = replicas
        self.olympus = olympus
        
        ## Update next and previous replica by each replica
        self.num_of_replicas = len(replicas)
        if replica_no == 0:
            self.prev = None
            self.me = replicas[0]
            self.next_r = replicas[1]
        elif replica_no == len(replicas) - 1:
            self.prev = replicas[replica_no - 1]
            self.me = replicas[replica_no]
            self.next_r = None
        else:
            self.prev = replicas[replica_no - 1]
            self.me = replicas[replica_no]
            self.next_r = replicas[replica_no + 1]
    
    # Only head is supposed to handle order request from client    
    def receive(msg=('order_request', client, order_req,)):
        output("Received order request from " + str(client))
        if self.prev == None:
            print("Forwarding order request to next : ")
            send(('order_request', client, order_req,), to = self.next_r)
        else:
            print("I am not the head to take order request from client")

    # Order request forwarded from replicas
    def receive(msg=('order_request', client, order_req,), from_ = self.prev):
        output("Received order request from prev for client" + str(client))
        if self.next_r != None:
            print("Forwarding order request to next : ")
            send(('order_request', client, order_req,), to = self.next_r)
        else:
            print("I am the tail and sending to client")
            send(('result_proof', 'Some Result which is proof', self.replica_no,), to = client)
            print("sending result proof shuttle back")
            send(('result_proof', 'Returning result proof',), to = self.prev)
    
    # Result proof handled from next
    def receive(msg=('result_proof', result_proof,), from_ = self.next_r):
        output("Received  result from next")
        if self.prev != None:
            print("Forwarding result proof to prev : ")
            send(('result_proof', result_proof,), to = self.prev)
        else:
            print("I am the Head and have received result proof shuttle")
            print(result_proof)

    '''    
    def receive(msg=('test', ), from_= self.prev):
        output("Received data from " + str(self.prev))
        if self.next_r == None:
            print("Sending to client : ")
            send(('reverse',), to = self.prev)
        else:
            send(('test',), to = self.next_r)

    def receive(msg=('reverse', ), from_= self.next_r):
        output("Received data from " + str(self.next_r))
        if self.prev == None:
            print("Shutttle back to head : ")
        else:
            send(('reverse',), to = self.prev)
    '''   
   
    def run():
        print("Before Sending -- ", str(self.me))
        ''' 
        if self.prev == None:
            print("Sending -- ", str(self.me), str(self.next_r))
            send(('test',), to = self.next_r)
        '''
        while True:
            await(received(('',)))

